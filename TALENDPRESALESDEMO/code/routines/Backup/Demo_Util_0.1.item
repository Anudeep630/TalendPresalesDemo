package routines;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class Demo_Util {

    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
	public static String formatMobile(String input)
	{
		if(input!=null)
			if(input.startsWith("0"))
			{
				input= input.substring(1, input.length()-1);
			}
		input = input.replaceAll("[^\\d.]", "");
		return input;

	}
	public static boolean checkEmailformat(String input)
	{
		String EMAIL_PATTERN = 
				"^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"
						+ "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";
		Pattern pattern = Pattern.compile(EMAIL_PATTERN);
		Matcher matcher = pattern.matcher(input);
		System.out.println(input +" : "+ matcher.matches());
		return matcher.matches();
	}
	public static boolean ageCheck(String input)
	{

		return input.matches("-?\\d+(\\.\\d+)?");

	}
	public static String getGender(String input)
	{
		String result="";
		if(input!=null && input.equalsIgnoreCase("F"))
		{
			result="FEMALE";
		}
		else if(input!=null && input.equalsIgnoreCase("FEM"))
		{
			result="FEMALE";
		}
		else if(input!=null && input.equalsIgnoreCase("FEMALE"))
		{
			result="FEMALE";
		}
		else if(input!=null && input.equalsIgnoreCase("M"))
		{
			result="MALE";
		}
		else if(input!=null && input.equalsIgnoreCase("MAL"))
		{
			result="MALE";
		}
		else if(input!=null && input.equalsIgnoreCase("MALE"))
		{
			result="MALE";
		}

		return result;

	}
	public static String getRegDateFormat(String input)
	{
		String result="";
	    Date date1=null;
		try {
			date1 = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss").parse(input);
			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
			result = formatter.format(date1);  
			return result;
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			return result;
		}   
		
	}
	public static String getDOBDateFormat(String input)
	{
		String result="";
	    Date date1=null;
		try {
			date1 = new SimpleDateFormat("MM/dd/yyyy").parse(input);
			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
			result = formatter.format(date1);  
			return result;
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			return result;
		}   
		
	}
    public static void helloExample(String message) {
        if (message == null) {
            message = "World"; //$NON-NLS-1$
        }
        System.out.println("Hello " + message + " !"); //$NON-NLS-1$ //$NON-NLS-2$
    }
}
